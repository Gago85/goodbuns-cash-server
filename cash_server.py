from flask import Flask, request, jsonify
from flask_cors import CORS
from datetime import datetime
import os
import logging
import requests
from openpyxl import Workbook
import json
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

app = Flask(__name__)
CORS(app)

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_—Ç–æ–∫–µ–Ω")
CHAT_ID = os.getenv("CHAT_ID", "–≤—Å—Ç–∞–≤—å_—Å—é–¥–∞_chat_id")
BASE_FOLDER = Path("D:/GoodbunsAIcash")

# üßæ –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
def create_excel(data, save_folder):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ö–∞—Å—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"

    ws.append(["–î–∞—Ç–∞", "–¢–æ—á–∫–∞", "–ù–∞–ª–∏—á–Ω—ã–µ", "–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ", "–í–æ–∑–≤—Ä–∞—Ç (–Ω–∞–ª)", "–í–æ–∑–≤—Ä–∞—Ç (–±–µ–∑–Ω–∞–ª)",
               "–ò—Ç–æ–≥–æ", "–û–±–µ–¥—ã", "–°–ø–∏—Å–∞–Ω–∏–µ", "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"])
    ws.append([
        data.get("date", ""),
        data.get("point", ""),
        data.get("cash", ""),
        data.get("card", ""),
        data.get("return_cash", ""),
        data.get("return_card", ""),
        data.get("total", ""),
        data.get("lunches", ""),
        data.get("writeoff", ""),
        data.get("comment", "")
    ])

    filename = f"–ö–∞—Å—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç - {data['point']} - {data['date']}.xlsx"
    filepath = save_folder / filename
    wb.save(filepath)
    return filepath, filename

# üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –∫–æ–ø–∏—é
def save_json(data, save_folder, filename):
    json_path = save_folder / (filename.replace(".xlsx", ".json"))
    with open(json_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
def send_to_telegram(filepath):
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendDocument"
    try:
        with open(filepath, "rb") as file:
            response = requests.post(url, data={
                "chat_id": CHAT_ID,
                "caption": "üí∞ –ù–æ–≤—ã–π –∫–∞—Å—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"
            }, files={"document": file})

        logging.error(f"Telegram response: {response.status_code} - {response.text}")
        return response.status_code == 200
    except Exception as e:
        logging.error(f"Telegram send error: {str(e)}")
        return False

# üì• –ü—Ä–∏—ë–º –æ—Ç—á—ë—Ç–∞
@app.route("/submit_cash", methods=["POST"])
def handle_cash():
    try:
        data = request.form.to_dict()

        if not data.get("date"):
            data["date"] = datetime.now().strftime("%Y-%m-%d")

        date_folder = BASE_FOLDER / data["date"]
        date_folder.mkdir(parents=True, exist_ok=True)

        filepath, filename = create_excel(data, date_folder)
        save_json(data, date_folder, filename)
        sent = send_to_telegram(filepath)

        return jsonify({
            "status": "ok",
            "file": str(filepath),
            "telegram_sent": sent
        }), 200

    except Exception as e:
        error_text = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        print(error_text)
        logging.error(error_text)
        return jsonify({"status": "error", "message": str(e)}), 500

# üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ—à–∏–±–æ–∫
@app.route("/last_error", methods=["GET"])
def last_error():
    try:
        with open("errors.log", "r", encoding="utf-8") as f:
            lines = f.readlines()
            return "<br>".join(lines[-10:]) or "–ù–µ—Ç –æ—à–∏–±–æ–∫"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}"

# ‚öôÔ∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(filename="errors.log", level=logging.ERROR, format="%(asctime)s - %(message)s")

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=True)
